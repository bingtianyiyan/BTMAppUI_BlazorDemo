@page "/"
@page "/Products/Products"

@using DAL
@using DAL.Contracts;
@using DAL.Models

@inject IProductService productService
@inject IUploadImageService uploadImageService
@inject NavigationManager NavigationManager
@code {
	private Task<AuthenticationState> authenticationState { get; set; }
	private List<Product> products;
	private ProductImage? productImage;
	private string searchKeyword;
	public string ReturnMessage { get; set; }
	private string SearchKeyword { get; set; }
	protected override async Task OnInitializedAsync()
	{
		products = await productService.GetProducts();

		for (int i = 0; i < products.Count(); i++)
		{
			string img = await MapImageToProducts(products[i].Product_Id);
			products[i].PrimaryImage = img;
		}
	}

	protected async Task SearchProducts(string keyword)
	{
		ReturnMessage = string.Empty;
		products = await productService.SearchProducts(keyword);
		if (!products.Any())
			ReturnMessage = "No results found.";
	}

	public void Enter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			return;
		}
	}

	protected void ProductDetails(int product_Id)
	{
		NavigationManager.NavigateTo("/Products/ProductDetails/" + product_Id);
	}

	protected async Task<string> MapImageToProducts(int product_Id)
	{
		var result = await uploadImageService.GetImage(product_Id);
		return (result != null) ? result.ConvertedProductImage : string.Empty;
	}
}

@if (products is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<section class="py-5 text-center container">
		<div class="col-lg-8 mx-auto">
			<EditForm Model="@products" OnSubmit="() => SearchProducts(searchKeyword)" style="margin:auto;max-width:300px" class="searchProduct">
				<input type="text" placeholder="Search.." name="search" @bind-value="@searchKeyword">
				<button type="button" @onclick="() => SearchProducts(searchKeyword)"><i class="fa fa-search"></i></button>
			</EditForm>
		</div>
	</section>
	<!-- CAROUSEL START-->
	<section class="py-5 text-center container">
		<div class="col-lg-8 mx-auto">
			<div class="img-wrap">
				<img class="img-fluid" src="https://cb.scene7.com/is/image/Crate/cb_dPLP_20230209_OutdoorDinnerwareV2?wid=1440&qlt=85&op_sharpen=1">
			</div>
		</div>
	</section>
	<!-- CAROUSEL END-->
	<div class="row">
		@foreach (var product in products)
		{
			<!--cards-->
			<div class="col-md-3">
				<figure class="card card-product rounded-0 border-0" style="height: 500px;">
					<div class="col-md-12 img-fluid">
						@if (!string.IsNullOrEmpty(product.PrimaryImage))
						{
							<img class="img-fluid" @onclick="() => ProductDetails(product.Product_Id)" src="@product.PrimaryImage">
						}
						else
						{
							<img class="img-fluid" @onclick="() => ProductDetails(product.Product_Id)" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Placeholder_view_vector.svg/310px-Placeholder_view_vector.svg.png"  />
						}
					</div>
					<div class="bottom-wrap text-center mt-3">
						<span class="small">New Arrival</span>
						<h5 class="fs-6">@product.Product_Name</h5>
						<div class="price-wrap h6">
							<span class="fs-5">$@Math.Round((decimal)product.Price, 2)</span> <br>
							<del class="text-muted"> $1980</del>
						</div> <!-- price-wrap.// -->
					</div> <!-- bottom-wrap.// -->
				</figure>
			</div>
		}
	</div>
}



